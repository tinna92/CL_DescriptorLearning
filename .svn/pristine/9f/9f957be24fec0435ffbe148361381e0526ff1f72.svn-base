%% this function is used to analyze the feature repeatablity by simulating affine transformations 
% feature_detectortype. i.e. 'HessianLaplace','MultiscaleHarris'
% 'fast12','mser'
function [repeat_score]= Chen_imagerepeatability_inoneImage_analysis2(image_name,feature_detector_type,n,a,b,similarity_threshold)
% image_name = '000003-111406161250-04.tifresize.png';
% image_name = 'box.png';
% image_name = 'test.PNG';
% similarity_threshold = 2.0;
A = imread(image_name);
if(size(A,3)>1)
    A_Image = rgb2gray(A);
else
    A_Image = A;
end

size_img = size(A_Image);
% first detect features in original image.
if (strcmp(feature_detector_type,'fast12')~=1)&&(strcmp(feature_detector_type,'mser')~=1)
    A_Image = im2single(A_Image);
    [frames_origin, descrs_origin] = vl_covdet(A_Image, 'Method',feature_detector_type,'descriptor', 'Patch','PatchResolution',31,'Doubleimage',false,'EstimateAffineShape', true) ;
else
    if strcmp(feature_detector_type,'fast12')==1
        c12 = fast12(A_Image, 30,1);
        frames_origin = c12(:,1:2)';
    end
    if strcmp(feature_detector_type,'mser')==1
        [r,fmser] = vl_mser(A_Image,'MinDiversity',0.7,...
                'MaxVariation',0.2,...
                'MinArea',0.00005,...
                'Delta',10);
            fmser = vl_ertr(fmser) ;
            frames_origin = fmser(1:2,:);        
    end
end
% generate the fully affined images according to ASIFT paper
[aff_img] =  Chen_fullyaff_images_generate(A_Image,a,b,n);

% generate features in training samples
for ii=1:n+1
    t(ii)=a^(ii-1);
    k(ii) = floor(t(ii)*180/b)+1;
end

for ii=1:n
    for jj=1:k(ii)
        lat = t(ii);
        log = (jj-1)*b*pi/(180*lat);
        tform =Chen_AffineTransform( acos(1./lat),log,0,1,0,0);
        current_affimg = aff_img{ii,jj};
        
        % detect features in the current affined image
        if (strcmp(feature_detector_type,'fast12')~=1)&&(strcmp(feature_detector_type,'mser')~=1)
            current_affimg = im2single(current_affimg);
            [frames, descrs] = vl_covdet(current_affimg, 'Method',feature_detector_type,'descriptor', 'Patch','PatchResolution',31,'Doubleimage',false,'EstimateAffineShape', true) ;
        else
            if strcmp(feature_detector_type,'fast12')==1
                c12a = fast12(current_affimg, 30,1);
                frames = c12a(:,1:2)';
            end
            if strcmp(feature_detector_type,'mser')==1
                [r,fmser1] = vl_mser(A_Image,'MinDiversity',0.7,...
                    'MaxVariation',0.2,...
                    'MinArea',0.00005,...
                    'Delta',10);
                fmser1 = vl_ertr(fmser1) ;
                frames = fmser1(1:2,:);   
                clear fmser1;
            end
        end
        [xlim_final,ylim_final,x_scale, y_scale,outputRef] = Chen_Get_Map_FromWarpedImagetoAffinedImageCoord(size_img,tform.T);
        Num_currentFeatures = size(frames,2);  
        for kkk = 1:Num_currentFeatures
            [frames_c(1,kkk) frames_c(2,kkk)]=outputRef.intrinsicToWorld(frames(1,kkk),frames(2,kkk));
            [affine_frames(1,kkk) affine_frames(2,kkk)] = transformPointsInverse(tform,frames_c(1,kkk),frames_c(2,kkk));
        end


%         [index_ifrepeat_1stimg,repeated_feature_index_2ndimg] = Chen_analy_repeatedfeatures_in_2Images2(frames_origin, affine_frames,tform.T,similarity_threshold);
        [index_ifrepeat_1stimg,repeated_feature_index_2ndimg] = Chen_analy_repeatedfeatures_in_2Images2_quadtree(frames_origin, affine_frames,tform.T,similarity_threshold);
        % record the repeat symbol in image pairs and record them
        clear frames_c;
        frames_aff{ii,jj} = frames;
        aff_mat{ii,jj} = tform.T;%jj means the rotation around latitude
        repeat_score(ii,jj) = sum(index_ifrepeat_1stimg)/min(size(frames,2),size(frames_origin,2));
        index_origin_image{ii,jj} = index_ifrepeat_1stimg;
        index_aff_image{ii,jj} = repeated_feature_index_2ndimg;
    end
end
% analyze repeated features between image pairs

%% the next step, show the repeated features in different images
% from this process we can see if we have get the right features



% index_ifrepeat_1stimg = index_origin_image{1,3};
% % get the point coordinates for cross marks drawing
% Num = sum(index_ifrepeat_1stimg);
% draw_color = ['g','r','c','m','y','k'];
% draw_color_index =  mod(randperm(Num,Num),6)+1;
% [Tag_ori_left,Tag_ori_right,Tag_ori_top,Tag_ori_bottom] = Chen_Getcrossmark(frames_origin,5);% for showing positions
% figure(1);
% imshow(A);
% hold on;
% 
% if Num>0
%     [xxx,index_oriimage] = find(index_ifrepeat_1stimg==1);
%     for jjj=1:Num
%         ii = index_oriimage(jjj);
%         plot([Tag_ori_left(1,ii),Tag_ori_right(1,ii)],[Tag_ori_left(2,ii),Tag_ori_right(2,ii)],draw_color(draw_color_index(jjj)),'linewidth',1);
%         plot([Tag_ori_top(1,ii),Tag_ori_bottom(1,ii)],[Tag_ori_top(2,ii),Tag_ori_bottom(2,ii)],draw_color(draw_color_index(jjj)),'linewidth',1);
%     end
% end
% 
% figure(2);
% imshow(uint8(255*aff_img{1,3}));
% [Tag_aff_left,Tag_aff_right,Tag_aff_top,Tag_aff_bottom] = Chen_Getcrossmark(frames_aff{1,3},5);% for showing positions
% hold on;% get the point coordinates for cross marks drawing
% if Num>0
%     for jjj=1:Num
%         ii = index_aff_image{1,3}(jjj);
%         plot([Tag_aff_left(1,ii),Tag_aff_right(1,ii)],[Tag_aff_left(2,ii),Tag_aff_right(2,ii)],draw_color(draw_color_index(jjj)),'linewidth',1);
%         plot([Tag_aff_top(1,ii),Tag_aff_bottom(1,ii)],[Tag_aff_top(2,ii),Tag_aff_bottom(2,ii)],draw_color(draw_color_index(jjj)),'linewidth',1);
%     end
% end

end

